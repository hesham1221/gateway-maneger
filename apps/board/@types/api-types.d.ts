/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AppController_getData"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/gateways": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GatewayController_getAllGateways"];
        put?: never;
        post: operations["GatewayController_createGateway"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/gateways/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GatewayController_getGateway"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/gateways/{id}/devices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GatewayController_addDevice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/gateways/{id}/devices/{deviceUId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["GatewayController_removeDevice"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ApiResponse: {
            code: number;
            success: boolean;
            message: string;
            data: Record<string, never>;
        };
        PaginationInfo: {
            page?: number;
            limit?: number;
            totalCount?: number;
            hasNext: boolean;
            hasBefore: boolean;
        };
        PaginatedResponse: {
            items: unknown[][];
            pageInfo: components["schemas"]["PaginationInfo"];
        };
        PeripheralDevice: {
            uid: number;
            vendor: string;
            /** @enum {string} */
            status: "online" | "offline";
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        Gateway: {
            serialNumber: string;
            name: string;
            ipv4: string;
            devices: components["schemas"]["PeripheralDevice"][];
        };
        CreatePeripheralDeviceDto: {
            /** @description Vendor of the peripheral device */
            vendor: string;
            /**
             * @description Status of the peripheral device
             * @enum {string}
             */
            status: "online" | "offline";
        };
        CreateGatewayDto: {
            /** @description Unique serial number of the gateway */
            serialNumber: string;
            /** @description Human-readable name of the gateway */
            name: string;
            /**
             * @description IPv4 address of the gateway
             * @example 192.168.1.1
             */
            ipv4: string;
            /** @description List of peripheral devices associated with the gateway */
            devices: components["schemas"]["CreatePeripheralDeviceDto"][];
        };
        Boolean: Record<string, never>;
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AppController_getData: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GatewayController_getAllGateways: {
        parameters: {
            query?: {
                page?: number;
                limit?: number;
                searchKey?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        code?: number;
                        success?: boolean;
                        message?: string;
                        data?: {
                            items?: components["schemas"]["Gateway"][];
                            pageInfo?: components["schemas"]["PaginationInfo"];
                        };
                    };
                };
            };
        };
    };
    GatewayController_createGateway: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateGatewayDto"];
            };
        };
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        code?: number;
                        success?: boolean;
                        message?: string;
                        data?: components["schemas"]["Gateway"];
                    };
                };
            };
        };
    };
    GatewayController_getGateway: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        code?: number;
                        success?: boolean;
                        message?: string;
                        data?: components["schemas"]["Gateway"];
                    };
                };
            };
        };
    };
    GatewayController_addDevice: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreatePeripheralDeviceDto"];
            };
        };
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        code?: number;
                        success?: boolean;
                        message?: string;
                        data?: components["schemas"]["PeripheralDevice"];
                    };
                };
            };
        };
    };
    GatewayController_removeDevice: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                deviceUId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        code?: number;
                        success?: boolean;
                        message?: string;
                        data?: components["schemas"]["Boolean"];
                    };
                };
            };
        };
    };
}
